from django.db import IntegrityError
from django.http import JsonResponse
from django.views import View
from django.conf import settings

from django.contrib.auth.models import User

from rest_framework.authtoken.models import Token

from telebot import TeleBot, types

from YandexAPI.models import Device, OAuthKey
from YandexAPI.utils import register_allDevice

from .keyboard import create_MainKeyboard, create_SettingsKeyboard

from .utils import create_token_for_user


token = settings.TELEGRAM_BOT_TOKEN
url_domain = settings.DOMAIN_URL


bot = TeleBot(token)
url_tg_webhook = f'{url_domain}/tg/webhook/'
print(url_tg_webhook)
bot.set_webhook(url=url_tg_webhook)


class UpdateBot(View):
    def post(self, request):
        try:
            json_str = request.body.decode('UTF-8')
            update = types.Update.de_json(json_str)
            bot.process_new_updates([update])

            return JsonResponse({'code': 200})
        except Exception as e:
            print(f"Error processing update: {e}")
            return JsonResponse({'code': 500, 'error': str(e)})
        
@bot.message_handler(commands=['start'])
def start_message(message):
    text = '<b>–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!</b>\n\n'
    text += "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –µ–≥–æ –Ω–∞–∂–º–∏—Ç–µ 'üñäÔ∏è –ù–∞—á–∞—Ç—å', .\n\n"
 
    keyboard = types.InlineKeyboardMarkup()
    key_begin = types.InlineKeyboardButton(text='üñäÔ∏è –ù–∞—á–∞—Ç—å', callback_data='runbot')
    keyboard.add(key_begin)
 
    bot.send_message(message.chat.id, text=text, reply_markup=keyboard, parse_mode='HTML')        
    
    
# Register user on the System
@bot.callback_query_handler(func=lambda call: call.data == 'runbot')
def handle_begin_callback(call):
    try:
        username = call.from_user.username
        first_name = call.from_user.first_name
        last_name = call.from_user.last_name
        last_name = last_name if last_name is not None else ''

        try:
            user, created = User.objects.get_or_create(username=username, first_name=first_name, last_name=last_name)
        except IntegrityError:
            user = User.objects.get(username=username)
            created = False
            
        create_token_for_user(call.from_user.username)

        if created:
            print(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (user) {username} –±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.')

        else:
            print('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–æ–∑–¥–∞–ª—Å—è')
            
        keyboard = create_MainKeyboard()
        
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
        bot.send_message(call.message.chat.id, f'–î–æ–±—Ä–æ–≥–æ {username}',reply_markup=keyboard)
       
    except Exception as e:
        bot.send_message(call.message.chat.id, f"–û—à–∏–±–∫–∞: {e}")


@bot.message_handler(func=lambda message: "–ü—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç '–Ø–Ω–¥–µ–∫—Å'" in message.text)
def mainMenu(message):
    try:
        username = message.chat.username
        user = User.objects.get(username=username)
        token = Token.objects.get(user=user)
        token_key = token.key
        
        markup = types.InlineKeyboardMarkup()
        button = types.InlineKeyboardButton("–ö–ª–∏–∫–Ω–∏—Ç–µ —Å—é–¥–∞", 
                                              url=f"{url_domain}/yaapi/callback/?token={token_key}")
        markup.add(button)
        bot.send_message(message.chat.id, "–î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å–∞–π—Ç –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞", reply_markup=markup)
        
        markup = types.InlineKeyboardMarkup()
        button2 = types.InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∏–≤—è–∑–∫—É –∞–∫–∫–∞—É–Ω—Ç–∞ '–Ø–Ω–¥–µ–∫—Å'", 
                                               callback_data='link_yandex')
        markup.add(button2)
        bot.send_message(message.chat.id, '–ü–æ—Å–ª–µ –ø—Ä–∏–≤—è–∑–∫–∏ –Ω–∞–∂–º–∏—Ç–µ —Å—é–¥–∞, –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è', reply_markup=markup)

    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {e}")


@bot.callback_query_handler(func=lambda call: call.data == 'link_yandex')
def link_yandex(call):
    try:
        username = call.from_user.username
        user = User.objects.get(username=username)
        oauth_key = OAuthKey.objects.filter(user=user).exists()
                
        if oauth_key:
            keyboard = create_SettingsKeyboard(username)
            bot.send_message(call.message.chat.id, "–ê–∫–∫–∞—É–Ω—Ç '–Ø–Ω–¥–µ–∫—Å' —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω", reply_markup=keyboard)
            register_allDevice(username)
                
        else:
            bot.send_message(call.message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–Ω–µ–µ")
            
    except Exception as e:
        bot.send_message(call.message.chat.id, f"–û—à–∏–±–∫–∞: {e}")


@bot.message_handler(func=lambda message: "–ü–µ—Ä–µ—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞" in message.text)
def settingsMenu(message):
    try:
        username = message.chat.username
        user = User.objects.get(username=username)     
        Device.objects.filter(user=user).delete()
        bot.send_message(message.chat.id, f"–£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —É–¥–∞–ª–µ–Ω—ã")
        register_allDevice(username)
        bot.send_message(message.chat.id, f'–£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã')

    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {e}")    


@bot.message_handler(func=lambda message: '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' in message.text)
def mainMenu(message):
    try:
        keyboard = create_MainKeyboard()
        bot.send_message(message.chat.id, f'–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é', reply_markup=keyboard)

    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {e}")


@bot.message_handler(func=lambda message: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏' in message.text)
def settingsMenu(message):
    try:
        keyboard = create_SettingsKeyboard(message.chat.username)
        bot.send_message(message.chat.id, f'–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫',reply_markup=keyboard)

    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {e}")
